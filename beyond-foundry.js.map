{"version":3,"file":"beyond-foundry.js","sources":["src/module/constants.ts","src/module/utils/settings.ts","src/module/utils/logger.ts","src/module/api/BeyondFoundryAPI.ts","src/module/beyond-foundry.ts"],"sourcesContent":["// Module constants\nexport const MODULE_ID = 'beyond-foundry';\nexport const MODULE_NAME = 'Beyond Foundry';\n\n// API endpoints - configured for Docker environment\nexport const DEFAULT_PROXY_URL = 'http://localhost:3100';\nexport const DOCKER_PROXY_URL = 'http://ddb-proxy:3000';\n\n// D&D Beyond API constants\nexport const DDB_BASE_URL = 'https://www.dndbeyond.com';\nexport const DDB_API_BASE = 'https://character-service.dndbeyond.com';\n\n// Settings keys\nexport const SETTINGS = {\n  PROXY_URL: 'proxyUrl',\n  USE_DOCKER_PROXY: 'useDockerProxy',\n  API_ENDPOINT: 'apiEndpoint',\n  DEBUG_MODE: 'debugMode',\n  AUTO_IMPORT_ITEMS: 'autoImportItems',\n  IMPORT_POLICY: 'importPolicy'\n} as const;\n\n// Default import options\nexport const DEFAULT_IMPORT_OPTIONS = {\n  importItems: true,\n  importSpells: true,\n  updateExisting: false,\n  createCompendiumItems: true\n};\n","import { MODULE_ID, SETTINGS, DEFAULT_PROXY_URL, DOCKER_PROXY_URL } from '../constants.js';\nimport type { ModuleSettings, ImportPolicy } from '../../types/index.js';\n\n/**\n * Register all module settings\n */\nexport function registerSettings(): void {\n  // Proxy configuration\n  game.settings.register(MODULE_ID, SETTINGS.PROXY_URL, {\n    name: 'beyond-foundry.settings.proxyUrl.name',\n    hint: 'beyond-foundry.settings.proxyUrl.hint', \n    scope: 'world',\n    config: true,\n    type: String,\n    default: DEFAULT_PROXY_URL,\n    onChange: () => window.location.reload()\n  });\n\n  game.settings.register(MODULE_ID, SETTINGS.USE_DOCKER_PROXY, {\n    name: 'beyond-foundry.settings.useDockerProxy.name',\n    hint: 'beyond-foundry.settings.useDockerProxy.hint',\n    scope: 'world', \n    config: true,\n    type: Boolean,\n    default: false,\n    onChange: (value: boolean) => {\n      if (value) {\n        game.settings.set(MODULE_ID, SETTINGS.PROXY_URL, DOCKER_PROXY_URL);\n      } else {\n        game.settings.set(MODULE_ID, SETTINGS.PROXY_URL, DEFAULT_PROXY_URL);\n      }\n    }\n  });\n\n  // API configuration  \n  game.settings.register(MODULE_ID, SETTINGS.API_ENDPOINT, {\n    name: 'beyond-foundry.settings.apiEndpoint.name',\n    hint: 'beyond-foundry.settings.apiEndpoint.hint',\n    scope: 'world',\n    config: true,\n    type: String,\n    default: '',\n    onChange: () => window.location.reload()\n  });\n\n  // Debug mode\n  game.settings.register(MODULE_ID, SETTINGS.DEBUG_MODE, {\n    name: 'beyond-foundry.settings.debugMode.name',\n    hint: 'beyond-foundry.settings.debugMode.hint',\n    scope: 'client',\n    config: true,\n    type: Boolean,\n    default: false\n  });\n\n  // Import options\n  game.settings.register(MODULE_ID, SETTINGS.AUTO_IMPORT_ITEMS, {\n    name: 'beyond-foundry.settings.autoImportItems.name',\n    hint: 'beyond-foundry.settings.autoImportItems.hint',\n    scope: 'world',\n    config: true,\n    type: Boolean,\n    default: true\n  });\n\n  game.settings.register(MODULE_ID, SETTINGS.IMPORT_POLICY, {\n    name: 'beyond-foundry.settings.importPolicy.name', \n    hint: 'beyond-foundry.settings.importPolicy.hint',\n    scope: 'world',\n    config: true,\n    type: String,\n    choices: {\n      'ask': 'beyond-foundry.settings.importPolicy.ask',\n      'update': 'beyond-foundry.settings.importPolicy.update', \n      'replace': 'beyond-foundry.settings.importPolicy.replace',\n      'skip': 'beyond-foundry.settings.importPolicy.skip'\n    },\n    default: 'ask'\n  });\n}\n\n/**\n * Get a module setting value\n */\nexport function getModuleSetting<T = any>(settingKey: string): T {\n  return game.settings.get(MODULE_ID, settingKey) as T;\n}\n\n/**\n * Set a module setting value\n */\nexport function setModuleSetting(settingKey: string, value: any): Promise<any> {\n  return game.settings.set(MODULE_ID, settingKey, value);\n}\n\n/**\n * Get all module settings as a typed object\n */\nexport function getModuleSettings(): ModuleSettings {\n  return {\n    proxyUrl: getModuleSetting(SETTINGS.PROXY_URL),\n    useDockerProxy: getModuleSetting(SETTINGS.USE_DOCKER_PROXY),\n    apiEndpoint: getModuleSetting(SETTINGS.API_ENDPOINT), \n    debugMode: getModuleSetting(SETTINGS.DEBUG_MODE),\n    autoImportItems: getModuleSetting(SETTINGS.AUTO_IMPORT_ITEMS),\n    importPolicy: getModuleSetting(SETTINGS.IMPORT_POLICY) as ImportPolicy\n  };\n}\n","import { MODULE_ID } from '../constants.js';\n\n/**\n * Logger utility for Beyond Foundry module\n */\nexport class Logger {\n  private static moduleId = MODULE_ID;\n\n  static log(message: string, level: 'info' | 'warn' | 'error' | 'debug' = 'info'): void {\n    const prefix = `${this.moduleId} |`;\n    \n    switch (level) {\n      case 'info':\n        console.log(prefix, message);\n        break;\n      case 'warn':\n        console.warn(prefix, message);\n        break;\n      case 'error':\n        console.error(prefix, message);\n        break;\n      case 'debug':\n        if (game.settings.get(MODULE_ID, 'debugMode')) {\n          console.log(`${prefix} [DEBUG]`, message);\n        }\n        break;\n    }\n  }\n\n  static info(message: string): void {\n    this.log(message, 'info');\n  }\n\n  static warn(message: string): void {\n    this.log(message, 'warn');\n  }\n\n  static error(message: string): void {\n    this.log(message, 'error');\n  }\n\n  static debug(message: string): void {\n    this.log(message, 'debug');\n  }\n}\n\n// Convenience export\nexport const log = Logger.log.bind(Logger);\n\n/**\n * Safely extract error message from unknown error type\n */\nexport function getErrorMessage(error: unknown): string {\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return String(error);\n}\n","import type { \n  DDBCharacter, \n  CharacterListResponse, \n  ImportResult, \n  AuthResponse,\n  ImportOptions \n} from '../../types/index.js';\nimport { getModuleSettings } from '../utils/settings.js';\nimport { Logger, getErrorMessage } from '../utils/logger.js';\nimport { DEFAULT_IMPORT_OPTIONS } from '../constants.js';\n\n/**\n * Main API class for Beyond Foundry module\n * Handles communication with ddb-proxy and data transformation\n */\nexport class BeyondFoundryAPI {\n  private static instance: BeyondFoundryAPI;\n  private proxyEndpoint: string = '';\n  private apiEndpoint: string = '';\n  private initialized: boolean = false;\n\n  private constructor() {}\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): BeyondFoundryAPI {\n    if (!BeyondFoundryAPI.instance) {\n      BeyondFoundryAPI.instance = new BeyondFoundryAPI();\n    }\n    return BeyondFoundryAPI.instance;\n  }\n\n  /**\n   * Initialize the API with current settings\n   */\n  public init(): void {\n    if (this.initialized) return;\n\n    const settings = getModuleSettings();\n    this.proxyEndpoint = settings.proxyUrl;\n    this.apiEndpoint = settings.apiEndpoint;\n    this.initialized = true;\n    \n    Logger.info('BeyondFoundryAPI initialized');\n    \n    // Test proxy connection on init\n    this.testProxyConnection().catch(error => {\n      Logger.warn(`Initial proxy connection test failed: ${error.message}`);\n    });\n  }\n\n  /**\n   * Test connection to ddb-proxy\n   */\n  public async testProxyConnection(): Promise<boolean> {\n    try {\n      Logger.debug(`Testing proxy connection to: ${this.proxyEndpoint}`);\n      \n      const response = await fetch(`${this.proxyEndpoint}/ping`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        Logger.info('Proxy connection successful');\n        return true;\n      } else {\n        Logger.warn(`Proxy connection failed with status: ${response.status}`);\n        return false;\n      }\n    } catch (error) {\n      Logger.error(`Proxy connection error: ${getErrorMessage(error)}`);\n      return false;\n    }\n  }\n\n  /**\n   * Authenticate with D&D Beyond through proxy\n   * @param cobaltToken - The D&D Beyond Cobalt session token\n   */\n  public async authenticate(cobaltToken: string): Promise<AuthResponse> {\n    try {\n      Logger.debug('Attempting authentication with D&D Beyond');\n      \n      const response = await fetch(`${this.proxyEndpoint}/proxy/auth`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cobaltToken: cobaltToken\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        Logger.info('Authentication successful');\n        return {\n          success: true,\n          userId: data.userId,\n          message: 'Authentication successful'\n        };\n      } else {\n        Logger.warn(`Authentication failed: ${data.message || 'Unknown error'}`);\n        return {\n          success: false,\n          message: data.message || 'Authentication failed'\n        };\n      }\n    } catch (error) {\n      Logger.error(`Authentication error: ${error.message}`);\n      return {\n        success: false,\n        message: `Authentication error: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * Get list of characters from D&D Beyond\n   */\n  public async getCharacterList(): Promise<CharacterListResponse> {\n    try {\n      Logger.debug('Fetching character list from D&D Beyond');\n      \n      const response = await fetch(`${this.proxyEndpoint}/proxy/api/character/list`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({})\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        Logger.info(`Retrieved ${data.characters?.length || 0} characters`);\n        return {\n          success: true,\n          characters: data.characters || []\n        };\n      } else {\n        Logger.warn(`Failed to retrieve characters: ${data.message || 'Unknown error'}`);\n        return {\n          success: false,\n          error: data.message || 'Failed to retrieve characters'\n        };\n      }\n    } catch (error) {\n      Logger.error(`Character list error: ${error.message}`);\n      return {\n        success: false,\n        error: `Character list error: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * Get character data from D&D Beyond\n   * @param characterId - The D&D Beyond character ID\n   */\n  public async getCharacter(characterId: string): Promise<DDBCharacter | null> {\n    try {\n      Logger.debug(`Fetching character data for ID: ${characterId}`);\n      \n      const response = await fetch(`${this.proxyEndpoint}/proxy/api/character/get`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          characterId: characterId\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        Logger.info(`Retrieved character data for: ${data.character?.name || 'Unknown'}`);\n        return data.character;\n      } else {\n        Logger.warn(`Failed to retrieve character: ${data.message || 'Unknown error'}`);\n        return null;\n      }\n    } catch (error) {\n      Logger.error(`Character fetch error: ${error.message}`);\n      return null;\n    }\n  }\n\n  /**\n   * Import a character from D&D Beyond to FoundryVTT\n   * @param characterId - The D&D Beyond character ID\n   * @param options - Import options\n   */\n  public async importCharacter(\n    characterId: string, \n    options: Partial<ImportOptions> = {}\n  ): Promise<ImportResult> {\n    try {\n      Logger.info(`Starting character import for ID: ${characterId}`);\n      \n      // Get character data from D&D Beyond\n      const ddbCharacter = await this.getCharacter(characterId);\n      if (!ddbCharacter) {\n        return {\n          success: false,\n          errors: ['Failed to fetch character data from D&D Beyond']\n        };\n      }\n\n      // Merge options with defaults\n      const importOptions = { ...DEFAULT_IMPORT_OPTIONS, ...options };\n\n      // TODO: Implement character parsing and creation\n      // This is where we'll transform DDB data to Foundry format\n      Logger.warn('Character parsing not yet implemented');\n      \n      return {\n        success: false,\n        errors: ['Character import not yet implemented'],\n        warnings: ['This is a placeholder - implementation coming soon']\n      };\n\n    } catch (error) {\n      Logger.error(`Character import error: ${error.message}`);\n      return {\n        success: false,\n        errors: [`Character import error: ${error.message}`]\n      };\n    }\n  }\n\n  /**\n   * Test method for development\n   * Quick test of API functionality with existing ddb-proxy\n   */\n  public async runConnectionTest(): Promise<void> {\n    Logger.info('Running Beyond Foundry connection test...');\n    \n    // Test 1: Proxy connection\n    const proxyTest = await this.testProxyConnection();\n    ui.notifications.info(`Proxy connection: ${proxyTest ? 'SUCCESS' : 'FAILED'}`);\n    \n    // Test 2: Character list (requires authentication)\n    try {\n      const characterList = await this.getCharacterList();\n      if (characterList.success) {\n        ui.notifications.info(`Character list: SUCCESS (${characterList.characters?.length || 0} characters)`);\n      } else {\n        ui.notifications.warn(`Character list: FAILED - ${characterList.error || 'Unknown error'}`);\n      }\n    } catch (error) {\n      ui.notifications.error(`Character list test failed: ${error.message}`);\n    }\n    \n    Logger.info('Connection test complete');\n  }\n}\n","import { MODULE_ID, MODULE_NAME } from './constants.js';\nimport { registerSettings } from './utils/settings.js';\nimport { Logger } from './utils/logger.js';\nimport { BeyondFoundryAPI } from './api/BeyondFoundryAPI.js';\n\n/**\n * Beyond Foundry Module Entry Point\n * \n * This module allows importing purchased D&D Beyond content into FoundryVTT\n * with support for characters, spells, items, and more.\n */\n\n// Initialize module when Foundry is ready\nHooks.once('init', async () => {\n  Logger.info(`Initializing ${MODULE_NAME}...`);\n  \n  // Register module settings\n  registerSettings();\n  \n  // Initialize API\n  const api = BeyondFoundryAPI.getInstance();\n  \n  // Expose API globally for console access and other modules\n  (game as any).modules.get(MODULE_ID).api = api;\n  \n  Logger.info(`${MODULE_NAME} initialized successfully`);\n});\n\n// Setup module when ready\nHooks.once('ready', async () => {\n  Logger.info(`${MODULE_NAME} ready`);\n  \n  // Initialize API with current settings\n  const api = BeyondFoundryAPI.getInstance();\n  api.init();\n  \n  // Add console message for developers\n  Logger.info('Access the API via: game.modules.get(\"beyond-foundry\").api');\n});\n\n// Add character sheet header button for import\nHooks.on('getActorSheetHeaderButtons', (app: any, buttons: any[]) => {\n  // Only add to character sheets in D&D 5e system\n  if (app.actor.type !== 'character' || game.system.id !== 'dnd5e') {\n    return;\n  }\n  \n  buttons.unshift({\n    label: 'Import from D&D Beyond',\n    class: 'beyond-foundry-import',\n    icon: 'fas fa-download',\n    onclick: () => {\n      Logger.info('D&D Beyond import button clicked');\n      ui.notifications.info('D&D Beyond import dialog - Coming Soon!');\n      // TODO: Open import dialog\n    }\n  });\n});\n\n// Add actor directory context menu option\nHooks.on('getActorDirectoryEntryContext', (html: any, options: any[]) => {\n  options.push({\n    name: 'Import from D&D Beyond',\n    icon: '<i class=\"fas fa-download\"></i>',\n    condition: () => game.system.id === 'dnd5e',\n    callback: () => {\n      Logger.info('D&D Beyond import context menu clicked');\n      ui.notifications.info('D&D Beyond import dialog - Coming Soon!');\n      // TODO: Open import dialog\n    }\n  });\n});\n\n// Console command for testing (development)\nHooks.once('ready', () => {\n  if (game.settings.get(MODULE_ID, 'debugMode')) {\n    Logger.info('Debug mode enabled - test commands available');\n    Logger.info('Try: game.modules.get(\"beyond-foundry\").api.runConnectionTest()');\n  }\n});\n\nLogger.info(`${MODULE_NAME} module loaded`);\n"],"names":[],"mappings":"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"}
{"version":3,"file":"beyond-foundry.js","sources":["src/module/constants.ts","src/module/utils/settings.ts","src/module/utils/logger.ts","src/parsers/character/CharacterParser.ts","src/module/api/BeyondFoundryAPI.ts","src/module/apps/AuthDialog.ts","src/module/apps/CharacterImportDialog.ts","src/module/beyond-foundry.ts"],"sourcesContent":["// Module constants\nexport const MODULE_ID = 'beyond-foundry';\nexport const MODULE_NAME = 'Beyond Foundry';\n\n// API endpoints - configured for Docker environment\nexport const DEFAULT_PROXY_URL = 'http://localhost:3100';\nexport const DOCKER_PROXY_URL = 'http://ddb-proxy:3000';\n\n// D&D Beyond API constants\nexport const DDB_BASE_URL = 'https://www.dndbeyond.com';\nexport const DDB_API_BASE = 'https://character-service.dndbeyond.com';\n\n// Settings keys\nexport const SETTINGS = {\n  PROXY_URL: 'proxyUrl',\n  USE_DOCKER_PROXY: 'useDockerProxy',\n  API_ENDPOINT: 'apiEndpoint',\n  DEBUG_MODE: 'debugMode',\n  AUTO_IMPORT_ITEMS: 'autoImportItems',\n  IMPORT_POLICY: 'importPolicy',\n  COBALT_TOKEN: 'cobaltToken'\n} as const;\n\n// Default import options\nexport const DEFAULT_IMPORT_OPTIONS = {\n  importItems: true,\n  importSpells: true,\n  updateExisting: false,\n  createCompendiumItems: true\n};\n","import { MODULE_ID, SETTINGS, DEFAULT_PROXY_URL, DOCKER_PROXY_URL } from '../constants.js';\nimport type { ModuleSettings, ImportPolicy } from '../../types/index.js';\n\n/**\n * Register all module settings\n */\nexport function registerSettings(): void {\n  // Proxy configuration\n  game.settings.register(MODULE_ID, SETTINGS.PROXY_URL, {\n    name: 'beyond-foundry.settings.proxyUrl.name',\n    hint: 'beyond-foundry.settings.proxyUrl.hint', \n    scope: 'world',\n    config: true,\n    type: String,\n    default: DEFAULT_PROXY_URL,\n    onChange: () => window.location.reload()\n  });\n\n  game.settings.register(MODULE_ID, SETTINGS.USE_DOCKER_PROXY, {\n    name: 'beyond-foundry.settings.useDockerProxy.name',\n    hint: 'beyond-foundry.settings.useDockerProxy.hint',\n    scope: 'world', \n    config: true,\n    type: Boolean,\n    default: false,\n    onChange: (value: boolean) => {\n      if (value) {\n        game.settings.set(MODULE_ID, SETTINGS.PROXY_URL, DOCKER_PROXY_URL);\n      } else {\n        game.settings.set(MODULE_ID, SETTINGS.PROXY_URL, DEFAULT_PROXY_URL);\n      }\n    }\n  });\n\n  // API configuration  \n  game.settings.register(MODULE_ID, SETTINGS.API_ENDPOINT, {\n    name: 'beyond-foundry.settings.apiEndpoint.name',\n    hint: 'beyond-foundry.settings.apiEndpoint.hint',\n    scope: 'world',\n    config: true,\n    type: String,\n    default: '',\n    onChange: () => window.location.reload()\n  });\n\n  // Debug mode\n  game.settings.register(MODULE_ID, SETTINGS.DEBUG_MODE, {\n    name: 'beyond-foundry.settings.debugMode.name',\n    hint: 'beyond-foundry.settings.debugMode.hint',\n    scope: 'client',\n    config: true,\n    type: Boolean,\n    default: false\n  });\n\n  // Import options\n  game.settings.register(MODULE_ID, SETTINGS.AUTO_IMPORT_ITEMS, {\n    name: 'beyond-foundry.settings.autoImportItems.name',\n    hint: 'beyond-foundry.settings.autoImportItems.hint',\n    scope: 'world',\n    config: true,\n    type: Boolean,\n    default: true\n  });\n\n  game.settings.register(MODULE_ID, SETTINGS.IMPORT_POLICY, {\n    name: 'beyond-foundry.settings.importPolicy.name', \n    hint: 'beyond-foundry.settings.importPolicy.hint',\n    scope: 'world',\n    config: true,\n    type: String,\n    choices: {\n      'ask': 'beyond-foundry.settings.importPolicy.ask',\n      'update': 'beyond-foundry.settings.importPolicy.update', \n      'replace': 'beyond-foundry.settings.importPolicy.replace',\n      'skip': 'beyond-foundry.settings.importPolicy.skip'\n    },\n    default: 'ask'\n  });\n\n  // Authentication\n  game.settings.register(MODULE_ID, SETTINGS.COBALT_TOKEN, {\n    name: 'beyond-foundry.settings.cobaltToken.name',\n    hint: 'beyond-foundry.settings.cobaltToken.hint',\n    scope: 'world',\n    config: false, // Hidden from UI - managed by auth dialog\n    type: String,\n    default: ''\n  });\n}\n\n/**\n * Get a module setting value\n */\nexport function getModuleSetting<T = any>(settingKey: string): T {\n  return game.settings.get(MODULE_ID, settingKey) as T;\n}\n\n/**\n * Set a module setting value\n */\nexport function setModuleSetting(settingKey: string, value: any): Promise<any> {\n  return game.settings.set(MODULE_ID, settingKey, value);\n}\n\n/**\n * Get all module settings as a typed object\n */\nexport function getModuleSettings(): ModuleSettings {\n  return {\n    proxyUrl: getModuleSetting(SETTINGS.PROXY_URL),\n    useDockerProxy: getModuleSetting(SETTINGS.USE_DOCKER_PROXY),\n    apiEndpoint: getModuleSetting(SETTINGS.API_ENDPOINT), \n    debugMode: getModuleSetting(SETTINGS.DEBUG_MODE),\n    autoImportItems: getModuleSetting(SETTINGS.AUTO_IMPORT_ITEMS),\n    importPolicy: getModuleSetting(SETTINGS.IMPORT_POLICY) as ImportPolicy,\n    cobaltToken: getModuleSetting(SETTINGS.COBALT_TOKEN)\n  };\n}\n","import { MODULE_ID } from '../constants.js';\n\n/**\n * Logger utility for Beyond Foundry module\n */\nexport class Logger {\n  private static moduleId = MODULE_ID;\n\n  static log(message: string, level: 'info' | 'warn' | 'error' | 'debug' = 'info'): void {\n    const prefix = `${this.moduleId} |`;\n    \n    switch (level) {\n      case 'info':\n        console.log(prefix, message);\n        break;\n      case 'warn':\n        console.warn(prefix, message);\n        break;\n      case 'error':\n        console.error(prefix, message);\n        break;\n      case 'debug':\n        if (game.settings.get(MODULE_ID, 'debugMode')) {\n          console.log(`${prefix} [DEBUG]`, message);\n        }\n        break;\n    }\n  }\n\n  static info(message: string): void {\n    this.log(message, 'info');\n  }\n\n  static warn(message: string): void {\n    this.log(message, 'warn');\n  }\n\n  static error(message: string): void {\n    this.log(message, 'error');\n  }\n\n  static debug(message: string): void {\n    this.log(message, 'debug');\n  }\n}\n\n// Convenience export\nexport const log = Logger.log.bind(Logger);\n\n/**\n * Safely extract error message from unknown error type\n */\nexport function getErrorMessage(error: unknown): string {\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return String(error);\n}\n","import { Logger } from '../../module/utils/logger.js';\nimport type { \n  DDBCharacter, \n  FoundryActor, \n  DDBClass, \n  DDBModifier, \n  DDBItem, \n  DDBSpell \n} from '../../types/index.js';\n\n/**\n * Comprehensive Character Parser for D&D Beyond to FoundryVTT D&D 5e system\n * \n * This parser implements advanced features including:\n * - Enhanced abilities with saving throw proficiencies from modifiers\n * - Skills with proficiency detection and passive scores  \n * - Proper HP calculation with Constitution modifier\n * - Equipment parsing (weapons, armor, gear, magical items)\n * - Spell system with slot calculation and spellcasting attributes\n * - Movement and senses parsing (darkvision, etc.)\n * - Currency and encumbrance calculations\n * - Complete FoundryVTT D&D 5e actor structure\n */\nexport class CharacterParser {\n  \n  /**\n   * Parse a complete D&D Beyond character into FoundryVTT actor data\n   * @param ddbCharacter - The D&D Beyond character data\n   * @returns Foundry actor data with comprehensive parsing\n   */\n  public static parseCharacter(ddbCharacter: DDBCharacter): FoundryActor {\n    Logger.info(`🔮 Comprehensive parsing: ${ddbCharacter.name}`);\n\n    const actorData: FoundryActor = {\n      name: ddbCharacter.name,\n      type: 'character',\n      img: ddbCharacter.decorations?.avatarUrl || 'icons/svg/mystery-man.svg',\n      system: {\n        abilities: this.parseAbilities(ddbCharacter),\n        attributes: this.parseEnhancedAttributes(ddbCharacter),\n        details: this.parseDetails(ddbCharacter),\n        traits: this.parseTraits(ddbCharacter),\n        currency: this.parseCurrency(ddbCharacter),\n        skills: this.parseSkills(ddbCharacter),\n        spells: this.parseSpells(ddbCharacter),\n        resources: this.parseResources(ddbCharacter),\n        bonuses: this.parseBonuses(ddbCharacter)\n      },\n      items: this.parseAllItems(ddbCharacter),\n      effects: this.parseActiveEffects(ddbCharacter),\n      flags: {\n        'beyond-foundry': {\n          ddbCharacterId: ddbCharacter.id,\n          lastSync: Date.now(),\n          originalData: ddbCharacter,\n          parsingVersion: '2.0.0',\n          features: [\n            'enhanced-abilities',\n            'equipment-parsing', \n            'spell-integration',\n            'modifier-system',\n            'comprehensive-traits'\n          ]\n        }\n      }\n    };\n\n    Logger.info(`✅ Comprehensive parsing complete: ${actorData.name}`);\n    return actorData;\n  }\n\n  /**\n   * Parse abilities with all modifiers and proficiencies\n   */\n  private static parseAbilities(ddbCharacter: DDBCharacter) {\n    const abilities: any = {};\n    const abilityMap: Record<number, string> = {\n      1: 'str', 2: 'dex', 3: 'con', 4: 'int', 5: 'wis', 6: 'cha'\n    };\n\n    // Initialize abilities\n    Object.values(abilityMap).forEach(key => {\n      abilities[key] = {\n        value: 10,\n        proficient: 0,\n        bonuses: { check: '', save: '' },\n        min: 3,\n        mod: 0\n      };\n    });\n\n    // Apply base stats\n    if (ddbCharacter.stats) {\n      ddbCharacter.stats.forEach(stat => {\n        const abilityKey = abilityMap[stat.id];\n        if (abilityKey) {\n          abilities[abilityKey].value = stat.value || 10;\n          abilities[abilityKey].mod = this.getAbilityModifier(stat.value || 10);\n        }\n      });\n    }\n\n    // Apply saving throw proficiencies\n    this.applySavingThrowProficiencies(ddbCharacter, abilities);\n\n    return abilities;\n  }\n\n  /**\n   * Apply saving throw proficiencies from modifiers\n   */\n  private static applySavingThrowProficiencies(ddbCharacter: DDBCharacter, abilities: any) {\n    const modifiers = ddbCharacter.modifiers || {};\n    const abilityMap = { 1: 'str', 2: 'dex', 3: 'con', 4: 'int', 5: 'wis', 6: 'cha' };\n\n    Object.values(modifiers).forEach(modifierArray => {\n      if (Array.isArray(modifierArray)) {\n        modifierArray.forEach(modifier => {\n          if (modifier.type === 'proficiency' && modifier.subType === 'saving-throws') {\n            const abilityKey = abilityMap[modifier.entityId as keyof typeof abilityMap];\n            if (abilityKey && abilities[abilityKey]) {\n              abilities[abilityKey].proficient = 1;\n              Logger.debug(`💾 Save proficiency: ${abilityKey.toUpperCase()}`);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Parse character attributes (HP, AC, etc.)\n   */\n  private static parseAttributes(ddbCharacter: DDBCharacter) {\n    return {\n      ac: {\n        flat: null,\n        calc: 'default',\n        formula: ''\n      },\n      hp: {\n        value: ddbCharacter.baseHitPoints || 0,\n        max: ddbCharacter.baseHitPoints || 0,\n        temp: 0,\n        tempmax: 0,\n        bonuses: {\n          level: '',\n          overall: ''\n        }\n      },\n      init: {\n        ability: 'dex',\n        bonus: 0\n      },\n      movement: this.parseMovement(ddbCharacter),\n      senses: this.parseSenses(ddbCharacter),\n      spellcasting: ddbCharacter.spellcastingAbilityId ? this.getAbilityKey(ddbCharacter.spellcastingAbilityId) : '',\n      prof: this.calculateProficiencyBonus(ddbCharacter.classes || []),\n      spelldc: 8 // Will be calculated based on spellcasting ability\n    };\n  }\n\n  /**\n   * Parse character details with comprehensive class and level information\n   */\n  private static parseDetails(ddbCharacter: DDBCharacter) {\n    const totalLevel = this.getTotalLevel(ddbCharacter);\n    const primaryClass = this.getPrimaryClass(ddbCharacter);\n    \n    return {\n      biography: {\n        value: ddbCharacter.notes?.backstory || '',\n        public: ''\n      },\n      alignment: ddbCharacter.alignmentId ? this.parseAlignment(ddbCharacter.alignmentId) : '',\n      race: ddbCharacter.race?.fullName || '',\n      background: ddbCharacter.background?.definition?.name || '',\n      originalClass: primaryClass,\n      level: totalLevel,\n      classes: this.parseClassDetails(ddbCharacter),\n      xp: {\n        value: ddbCharacter.currentXp || 0,\n        max: this.getXpForLevel(totalLevel + 1),\n        pct: 0\n      },\n      appearance: ddbCharacter.notes?.appearance || '',\n      trait: ddbCharacter.notes?.personalityTraits || '',\n      ideal: ddbCharacter.notes?.ideals || '',\n      bond: ddbCharacter.notes?.bonds || '',\n      flaw: ddbCharacter.notes?.flaws || ''\n    };\n  }\n\n  /**\n   * Parse detailed class information\n   */\n  private static parseClassDetails(ddbCharacter: DDBCharacter): any {\n    if (!ddbCharacter.classes) return {};\n    \n    const classDetails: any = {};\n    ddbCharacter.classes.forEach(cls => {\n      const className = cls.definition.name.toLowerCase();\n      classDetails[className] = {\n        levels: cls.level,\n        subclass: cls.subclassDefinition?.name || '',\n        hitDie: cls.definition.hitDie\n      };\n    });\n    \n    return classDetails;\n  }\n\n  /**\n   * Parse character traits with enhanced resistances, languages, and proficiencies\n   */\n  private static parseTraits(ddbCharacter: DDBCharacter) {\n    return {\n      size: this.parseSize(ddbCharacter.race?.size || 'medium'),\n      senses: '',\n      languages: {\n        value: this.parseLanguages(ddbCharacter),\n        custom: ''\n      },\n      di: { value: [], custom: '' }, // Damage immunities\n      dr: { value: [], custom: '' }, // Damage resistances  \n      dv: { value: [], custom: '' }, // Damage vulnerabilities\n      ci: { value: [], custom: '' }, // Condition immunities\n      weaponProf: {\n        value: this.parseWeaponProficiencies(ddbCharacter),\n        custom: ''\n      },\n      armorProf: {\n        value: this.parseArmorProficiencies(ddbCharacter),\n        custom: ''\n      },\n      toolProf: {\n        value: this.parseToolProficiencies(ddbCharacter),\n        custom: ''\n      }\n    };\n  }\n\n  /**\n   * Parse weapon proficiencies from modifiers\n   */\n  private static parseWeaponProficiencies(ddbCharacter: DDBCharacter): string[] {\n    const proficiencies: string[] = [];\n    const modifiers = ddbCharacter.modifiers || {};\n    \n    Object.values(modifiers).forEach(modifierArray => {\n      if (Array.isArray(modifierArray)) {\n        modifierArray.forEach(modifier => {\n          if (modifier.type === 'proficiency' && \n              modifier.subType && \n              modifier.subType.includes('weapon')) {\n            proficiencies.push(modifier.friendlySubtypeName || modifier.subType);\n          }\n        });\n      }\n    });\n    \n    return proficiencies;\n  }\n\n  /**\n   * Parse armor proficiencies from modifiers\n   */\n  private static parseArmorProficiencies(ddbCharacter: DDBCharacter): string[] {\n    const proficiencies: string[] = [];\n    const modifiers = ddbCharacter.modifiers || {};\n    \n    Object.values(modifiers).forEach(modifierArray => {\n      if (Array.isArray(modifierArray)) {\n        modifierArray.forEach(modifier => {\n          if (modifier.type === 'proficiency' && \n              modifier.subType && \n              modifier.subType.includes('armor')) {\n            proficiencies.push(modifier.friendlySubtypeName || modifier.subType);\n          }\n        });\n      }\n    });\n    \n    return proficiencies;\n  }\n\n  /**\n   * Parse tool proficiencies from modifiers\n   */\n  private static parseToolProficiencies(ddbCharacter: DDBCharacter): string[] {\n    const proficiencies: string[] = [];\n    const modifiers = ddbCharacter.modifiers || {};\n    \n    Object.values(modifiers).forEach(modifierArray => {\n      if (Array.isArray(modifierArray)) {\n        modifierArray.forEach(modifier => {\n          if (modifier.type === 'proficiency' && \n              modifier.subType && \n              (modifier.subType.includes('tool') || modifier.subType.includes('kit'))) {\n            proficiencies.push(modifier.friendlySubtypeName || modifier.subType);\n          }\n        });\n      }\n    });\n    \n    return proficiencies;\n  }\n\n  /**\n   * Parse currency from D&D Beyond\n   */\n  private static parseCurrency(ddbCharacter: DDBCharacter) {\n    const currencies = ddbCharacter.currencies || { cp: 0, sp: 0, ep: 0, gp: 0, pp: 0 };\n    return {\n      pp: currencies.pp || 0,\n      gp: currencies.gp || 0, \n      ep: currencies.ep || 0,\n      sp: currencies.sp || 0,\n      cp: currencies.cp || 0\n    };\n  }\n\n  /**\n   * Parse skills and proficiencies with comprehensive proficiency detection\n   */\n  private static parseSkills(ddbCharacter: DDBCharacter) {\n    const skills: any = {};\n    \n    // D&D 5e system skills\n    const skillList = [\n      'acr', 'ani', 'arc', 'ath', 'dec', 'his', 'ins', 'itm', 'inv', \n      'med', 'nat', 'prc', 'prf', 'per', 'rel', 'slt', 'ste', 'sur'\n    ];\n\n    skillList.forEach(skill => {\n      skills[skill] = {\n        value: 0, // 0 = not proficient, 1 = proficient, 2 = expertise\n        ability: this.getSkillAbility(skill),\n        bonuses: {\n          check: '',\n          passive: ''\n        }\n      };\n    });\n\n    // Apply skill proficiencies from modifiers\n    this.applySkillProficiencies(ddbCharacter, skills);\n\n    return skills;\n  }\n\n  /**\n   * Apply skill proficiencies from D&D Beyond modifiers\n   */\n  private static applySkillProficiencies(ddbCharacter: DDBCharacter, skills: any) {\n    const modifiers = ddbCharacter.modifiers || {};\n    \n    Object.values(modifiers).forEach(modifierArray => {\n      if (Array.isArray(modifierArray)) {\n        modifierArray.forEach(modifier => {\n          if (modifier.type === 'proficiency' && modifier.subType) {\n            const skillKey = this.getSkillKeyFromModifier(modifier);\n            if (skillKey && skills[skillKey]) {\n              skills[skillKey].value = 1; // Proficient\n              Logger.debug(`🎯 Skill proficiency: ${skillKey}`);\n            }\n          }\n          \n          if (modifier.type === 'expertise' && modifier.subType) {\n            const skillKey = this.getSkillKeyFromModifier(modifier);\n            if (skillKey && skills[skillKey]) {\n              skills[skillKey].value = 2; // Expertise\n              Logger.debug(`⭐ Skill expertise: ${skillKey}`);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Parse spell-related attributes with comprehensive spell slot calculation\n   */\n  private static parseSpells(ddbCharacter: DDBCharacter) {\n    const primaryClass = this.getPrimarySpellcastingClass(ddbCharacter);\n    const spellSlots = primaryClass ? \n      this.calculateSpellSlots(primaryClass.definition.name, primaryClass.level) : {};\n\n    return {\n      spell1: { value: spellSlots.spell1 || 0, override: null, max: spellSlots.spell1 || 0 },\n      spell2: { value: spellSlots.spell2 || 0, override: null, max: spellSlots.spell2 || 0 },\n      spell3: { value: spellSlots.spell3 || 0, override: null, max: spellSlots.spell3 || 0 },\n      spell4: { value: spellSlots.spell4 || 0, override: null, max: spellSlots.spell4 || 0 },\n      spell5: { value: spellSlots.spell5 || 0, override: null, max: spellSlots.spell5 || 0 },\n      spell6: { value: spellSlots.spell6 || 0, override: null, max: spellSlots.spell6 || 0 },\n      spell7: { value: spellSlots.spell7 || 0, override: null, max: spellSlots.spell7 || 0 },\n      spell8: { value: spellSlots.spell8 || 0, override: null, max: spellSlots.spell8 || 0 },\n      spell9: { value: spellSlots.spell9 || 0, override: null, max: spellSlots.spell9 || 0 },\n      pact: { value: 0, override: null, max: 0, level: 1 },\n      spells0: { value: 0, max: 0 },\n      spells1: { value: 0, max: 0 },\n      spells2: { value: 0, max: 0 },\n      spells3: { value: 0, max: 0 },\n      spells4: { value: 0, max: 0 },\n      spells5: { value: 0, max: 0 },\n      spells6: { value: 0, max: 0 },\n      spells7: { value: 0, max: 0 },\n      spells8: { value: 0, max: 0 },\n      spells9: { value: 0, max: 0 }\n    };\n  }\n\n  /**\n   * Parse character resources (inspiration, etc.)\n   */\n  private static parseResources(ddbCharacter: DDBCharacter) {\n    return {\n      primary: { value: 0, max: 0, sr: false, lr: false, label: '' },\n      secondary: { value: 0, max: 0, sr: false, lr: false, label: '' },\n      tertiary: { value: 0, max: 0, sr: false, lr: false, label: '' }\n    };\n  }\n\n  // Helper methods\n\n  private static isProficientInSave(ddbCharacter: DDBCharacter, abilityId: number): number {\n    // Check if character is proficient in this saving throw\n    // This would need to be implemented based on D&D Beyond data structure\n    return 0;\n  }\n\n  private static parseMovement(ddbCharacter: DDBCharacter) {\n    return {\n      burrow: 0,\n      climb: 0,\n      fly: 0,\n      swim: 0,\n      walk: ddbCharacter.race?.weightSpeeds?.normal?.walk || 30,\n      units: 'ft',\n      hover: false\n    };\n  }\n\n  private static parseSenses(ddbCharacter: DDBCharacter) {\n    return {\n      darkvision: 0,\n      blindsight: 0,\n      tremorsense: 0,\n      truesight: 0,\n      units: 'ft',\n      special: ''\n    };\n  }\n\n  private static calculateProficiencyBonus(classes: any[]): number {\n    const totalLevel = classes.reduce((sum, cls) => sum + (cls.level || 0), 0);\n    return Math.ceil(totalLevel / 4) + 1;\n  }\n\n  private static getAbilityKey(abilityId: number): string {\n    const map: Record<number, string> = {\n      1: 'str', 2: 'dex', 3: 'con', 4: 'int', 5: 'wis', 6: 'cha'\n    };\n    return map[abilityId] || '';\n  }\n\n  private static parseAlignment(alignmentId: number): string {\n    const alignments: Record<number, string> = {\n      1: 'lg', 2: 'ln', 3: 'le', 4: 'ng', 5: 'n', 6: 'ne', 7: 'cg', 8: 'cn', 9: 'ce'\n    };\n    return alignments[alignmentId] || 'n';\n  }\n\n  private static parseSize(size: string): string {\n    const sizeMap: Record<string, string> = {\n      'tiny': 'tiny',\n      'small': 'sm', \n      'medium': 'med',\n      'large': 'lg',\n      'huge': 'huge',\n      'gargantuan': 'grg'\n    };\n    return sizeMap[size.toLowerCase()] || 'med';\n  }\n\n  private static parseLanguages(ddbCharacter: DDBCharacter): string[] {\n    const languages: string[] = [];\n    \n    try {\n      // Check for language racial traits\n      if (ddbCharacter.race?.racialTraits && Array.isArray(ddbCharacter.race.racialTraits)) {\n        for (const trait of ddbCharacter.race.racialTraits) {\n          const definition = trait.definition;\n          if (definition && definition.name === 'Languages' && definition.description) {\n            // Extract language names from the description\n            const languageMatches = definition.description.match(/\\b(Common|Elvish|Dwarvish|Halfling|Draconic|Giant|Gnomish|Goblin|Orcish|Abyssal|Celestial|Deep Speech|Infernal|Primordial|Sylvan|Undercommon|Druidic)\\b/gi);\n            if (languageMatches) {\n              languages.push(...languageMatches.map(lang => lang.toLowerCase()));\n            }\n          }\n        }\n      }\n\n      // Check background languages\n      if (ddbCharacter.background?.definition?.languagesDescription) {\n        const bgLanguages = ddbCharacter.background.definition.languagesDescription;\n        // If it says \"Two of your choice\" or similar, we can't extract specific languages\n        if (!bgLanguages.includes('choice') && !bgLanguages.includes('any')) {\n          const languageMatches = bgLanguages.match(/\\b(Common|Elvish|Dwarvish|Halfling|Draconic|Giant|Gnomish|Goblin|Orcish|Abyssal|Celestial|Deep Speech|Infernal|Primordial|Sylvan|Undercommon|Druidic)\\b/gi);\n          if (languageMatches) {\n            languages.push(...languageMatches.map(lang => lang.toLowerCase()));\n          }\n        }\n      }\n\n      // Check for language proficiencies in modifiers\n      if (ddbCharacter.modifiers && typeof ddbCharacter.modifiers === 'object') {\n        for (const [key, modifierArray] of Object.entries(ddbCharacter.modifiers)) {\n          if (Array.isArray(modifierArray)) {\n            for (const modifier of modifierArray) {\n              if (modifier.type === 'language' && modifier.subType) {\n                const langName = modifier.subType.toLowerCase();\n                if (!languages.includes(langName)) {\n                  languages.push(langName);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // Remove duplicates and ensure Druidic is included for druids\n      const uniqueLanguages = [...new Set(languages)];\n      \n      // Check if character is a druid and add Druidic if not already present\n      if (ddbCharacter.classes && Array.isArray(ddbCharacter.classes)) {\n        const isDruid = ddbCharacter.classes.some(cls => \n          cls.definition?.name?.toLowerCase().includes('druid')\n        );\n        if (isDruid && !uniqueLanguages.includes('druidic')) {\n          uniqueLanguages.push('druidic');\n        }\n      }\n\n      return uniqueLanguages;\n    } catch (error) {\n      Logger.error(`Error parsing languages: ${error}`);\n      return ['common']; // Return at least Common as fallback\n    }\n  }\n\n  private static getSkillAbility(skill: string): string {\n    const skillAbilities: Record<string, string> = {\n      'acr': 'dex', 'ani': 'wis', 'arc': 'int', 'ath': 'str', 'dec': 'cha',\n      'his': 'int', 'ins': 'wis', 'itm': 'cha', 'inv': 'int', 'med': 'wis',\n      'nat': 'int', 'prc': 'wis', 'prf': 'cha', 'per': 'cha', 'rel': 'int',\n      'slt': 'dex', 'ste': 'dex', 'sur': 'wis'\n    };\n    return skillAbilities[skill] || 'int';\n  }\n\n  // ========== COMPREHENSIVE PARSING UTILITY METHODS ==========\n\n  private static getAbilityModifier(score: number): number {\n    return Math.floor((score - 10) / 2);\n  }\n\n  private static getTotalLevel(ddbCharacter: DDBCharacter): number {\n    if (!ddbCharacter.classes) return 1;\n    return ddbCharacter.classes.reduce((total, cls) => total + (cls.level || 0), 0) || 1;\n  }\n\n  private static getProficiencyBonus(level: number): number {\n    return Math.max(2, Math.ceil(level / 4) + 1);\n  }\n\n  private static getAbilityScore(ddbCharacter: DDBCharacter, statId: number): number {\n    if (!ddbCharacter.stats) return 10;\n    const stat = ddbCharacter.stats.find(s => s.id === statId);\n    return stat ? stat.value : 10;\n  }\n\n  private static getStatIdForAbility(ability: string): number {\n    const map = { 'str': 1, 'dex': 2, 'con': 3, 'int': 4, 'wis': 5, 'cha': 6 };\n    return map[ability as keyof typeof map] || 4;\n  }\n\n  private static getPrimaryClass(ddbCharacter: DDBCharacter): string {\n    if (!ddbCharacter.classes || ddbCharacter.classes.length === 0) return '';\n    const primaryClass = ddbCharacter.classes.reduce((prev, current) => \n      (current.level || 0) > (prev.level || 0) ? current : prev\n    );\n    return primaryClass.definition?.name || '';\n  }\n\n  private static getPrimarySpellcastingClass(ddbCharacter: DDBCharacter): DDBClass | null {\n    if (!ddbCharacter.classes) return null;\n    const spellcastingClasses = ddbCharacter.classes.filter(cls => \n      cls.definition && this.isSpellcastingClass(cls.definition.name)\n    );\n    if (spellcastingClasses.length === 0) return null;\n    return spellcastingClasses.reduce((prev, current) => \n      (current.level || 0) > (prev.level || 0) ? current : prev\n    );\n  }\n\n  private static getSpellcastingAbility(classObj: DDBClass | null): string {\n    if (!classObj || !classObj.definition) return 'int';\n    const abilities: Record<string, string> = {\n      'druid': 'wis', 'cleric': 'wis', 'ranger': 'wis',\n      'bard': 'cha', 'sorcerer': 'cha', 'warlock': 'cha', 'paladin': 'cha',\n      'wizard': 'int', 'artificer': 'int'\n    };\n    return abilities[classObj.definition.name.toLowerCase()] || 'int';\n  }\n\n  private static isSpellcastingClass(className: string): boolean {\n    return ['Artificer', 'Bard', 'Cleric', 'Druid', 'Paladin', 'Ranger', 'Sorcerer', 'Warlock', 'Wizard'].includes(className);\n  }\n\n  private static calculateSpellSlots(className: string, level: number): Record<string, number> {\n    const slots: Record<string, number> = {};\n    // Druid spell slot progression (full caster)\n    if (className === 'Druid') {\n      if (level >= 1) slots.spell1 = Math.min(4, Math.max(2, level === 1 ? 2 : level + 1));\n      if (level >= 3) slots.spell2 = Math.min(3, Math.floor((level + 1) / 2));\n      if (level >= 5) slots.spell3 = Math.min(3, Math.floor(level / 2) - 1);\n      if (level >= 7) slots.spell4 = Math.min(3, Math.floor(level / 4));\n      if (level >= 9) slots.spell5 = Math.min(2, Math.floor(level / 6));\n      if (level >= 11) slots.spell6 = 1;\n      if (level >= 13) slots.spell7 = 1;\n      if (level >= 15) slots.spell8 = 1;\n      if (level >= 17) slots.spell9 = 1;\n    }\n    return slots;\n  }\n\n  private static getAlignment(ddbCharacter: DDBCharacter): string {\n    if (!ddbCharacter.alignmentId) return '';\n    return this.parseAlignment(ddbCharacter.alignmentId);\n  }\n\n  private static getRaceSize(race: any): string {\n    if (!race) return 'med';\n    // Would parse from race data\n    return 'med';\n  }\n\n  private static getXpForLevel(level: number): number {\n    const xpTable = [0, 300, 900, 2700, 6500, 14000, 23000, 34000, 48000, 64000, 85000, 100000, 120000, 140000, 165000, 195000, 225000, 265000, 305000, 355000];\n    return xpTable[Math.min(level - 1, xpTable.length - 1)] || 355000;\n  }\n\n  private static getSkillKeyFromModifier(modifier: DDBModifier): string | null {\n    const skillMapping: Record<string, string> = {\n      'acrobatics': 'acr', 'animal-handling': 'ani', 'arcana': 'arc',\n      'athletics': 'ath', 'deception': 'dec', 'history': 'his',\n      'insight': 'ins', 'intimidation': 'inti', 'investigation': 'inv',\n      'medicine': 'med', 'nature': 'nat', 'perception': 'per',\n      'performance': 'prf', 'persuasion': 'per', 'religion': 'rel',\n      'sleight-of-hand': 'slt', 'stealth': 'ste', 'survival': 'sur'\n    };\n    return skillMapping[modifier.subType] || null;\n  }\n\n  private static getFoundryItemType(definition: any): string {\n    const typeMap: Record<string, string> = {\n      'Weapon': 'weapon', 'Armor': 'equipment', 'Shield': 'equipment',\n      'Gear': 'loot', 'Tool': 'tool', 'Potion': 'consumable'\n    };\n    return typeMap[definition.filterType] || 'loot';\n  }\n\n  private static getDefaultIcon(itemType: string): string {\n    const iconMap: Record<string, string> = {\n      weapon: 'icons/weapons/swords/sword-broad-silver.webp',\n      equipment: 'icons/equipment/chest/breastplate-scale-grey.webp',\n      loot: 'icons/containers/bags/pack-leather-brown.webp'\n    };\n    return iconMap[itemType] || 'icons/svg/item-bag.svg';\n  }\n\n  // ========== COMPREHENSIVE PARSING METHODS ==========\n\n  /**\n   * Parse enhanced attributes with spellcasting and encumbrance\n   */\n  private static parseEnhancedAttributes(ddbCharacter: DDBCharacter): any {\n    const totalLevel = this.getTotalLevel(ddbCharacter);\n    const constitutionMod = this.getAbilityModifier(this.getAbilityScore(ddbCharacter, 3));\n    \n    // Enhanced HP calculation\n    const baseHP = ddbCharacter.baseHitPoints || 0;\n    const bonusHP = ddbCharacter.bonusHitPoints || 0;\n    const overrideHP = ddbCharacter.overrideHitPoints;\n    const removedHP = ddbCharacter.removedHitPoints || 0;\n    \n    let maxHP;\n    if (overrideHP !== null && overrideHP !== undefined) {\n      maxHP = overrideHP;\n    } else {\n      maxHP = baseHP + (constitutionMod * totalLevel) + bonusHP;\n    }\n    \n    const currentHP = Math.max(0, maxHP - removedHP);\n    \n    // Spellcasting attributes\n    const primaryClass = this.getPrimarySpellcastingClass(ddbCharacter);\n    const spellcastingAbility = this.getSpellcastingAbility(primaryClass);\n    const spellcastingMod = this.getAbilityModifier(\n      this.getAbilityScore(ddbCharacter, this.getStatIdForAbility(spellcastingAbility))\n    );\n    const profBonus = this.getProficiencyBonus(totalLevel);\n\n    return {\n      ac: { flat: null, calc: 'default', formula: '' },\n      hp: { \n        value: currentHP, \n        max: maxHP, \n        temp: ddbCharacter.temporaryHitPoints || 0, \n        tempmax: 0 \n      },\n      init: { \n        ability: 'dex', \n        bonus: 0,\n        mod: this.getAbilityModifier(this.getAbilityScore(ddbCharacter, 2)),\n        prof: 0,\n        total: this.getAbilityModifier(this.getAbilityScore(ddbCharacter, 2))\n      },\n      movement: this.parseMovement(ddbCharacter),\n      senses: this.parseSenses(ddbCharacter),\n      spellcasting: spellcastingAbility,\n      prof: profBonus,\n      spelldc: 8 + profBonus + spellcastingMod,\n      encumbrance: this.parseEncumbrance(ddbCharacter)\n    };\n  }\n\n  /**\n   * Parse encumbrance system\n   */\n  private static parseEncumbrance(ddbCharacter: DDBCharacter): any {\n    const strengthScore = this.getAbilityScore(ddbCharacter, 1); // Strength ID = 1\n    const carryingCapacity = strengthScore * 15;\n    \n    return {\n      value: 0, // Current encumbrance - would need to calculate from inventory\n      max: carryingCapacity,\n      pct: 0,\n      encumbered: false\n    };\n  }\n\n  /**\n   * Parse all items (equipment, spells, features)\n   */\n  private static parseAllItems(ddbCharacter: DDBCharacter): any[] {\n    const items: any[] = [];\n    \n    // Parse equipment\n    items.push(...this.parseEquipment(ddbCharacter));\n    \n    // Parse spells as items\n    items.push(...this.parseSpellItems(ddbCharacter));\n    \n    // Parse features (simplified for now)\n    items.push(...this.parseFeatures(ddbCharacter));\n\n    Logger.info(`📦 Parsed ${items.length} total items`);\n    return items;\n  }\n\n  /**\n   * Parse active effects (simplified for now)\n   */\n  private static parseActiveEffects(ddbCharacter: DDBCharacter): any[] {\n    return [];\n  }\n\n  /**\n   * Parse character bonuses\n   */\n  private static parseBonuses(ddbCharacter: DDBCharacter): any {\n    return {\n      mwak: { attack: '', damage: '' },\n      rwak: { attack: '', damage: '' },\n      msak: { attack: '', damage: '' },\n      rsak: { attack: '', damage: '' },\n      abilities: { check: '', save: '', skill: '' },\n      spell: { dc: '' }\n    };\n  }\n\n  /**\n   * Parse equipment items\n   */\n  private static parseEquipment(ddbCharacter: DDBCharacter): any[] {\n    const items: any[] = [];\n    \n    if (ddbCharacter.inventory) {\n      ddbCharacter.inventory.forEach(item => {\n        try {\n          const foundryItem = this.parseInventoryItem(item);\n          if (foundryItem) {\n            items.push(foundryItem);\n          }\n        } catch (error) {\n          Logger.error(`Equipment parsing error: ${(error as Error).message}`);\n        }\n      });\n    }\n\n    Logger.debug(`⚔️ Parsed ${items.length} equipment items`);\n    return items;\n  }\n\n  /**\n   * Parse individual inventory item\n   */\n  private static parseInventoryItem(ddbItem: DDBItem): any | null {\n    if (!ddbItem.definition) return null;\n\n    const definition = ddbItem.definition;\n    const itemType = this.getFoundryItemType(definition);\n    \n    return {\n      name: definition.name,\n      type: itemType,\n      img: (definition as any).avatarUrl || this.getDefaultIcon(itemType),\n      system: {\n        description: { value: definition.description || '' },\n        quantity: ddbItem.quantity || 1,\n        weight: (definition.weight || 0) * ((definition as any).weightMultiplier || 1),\n        price: { value: definition.cost?.quantity || 0, denomination: 'gp' },\n        equipped: ddbItem.equipped || false,\n        rarity: definition.rarity?.toLowerCase() || 'common',\n        identified: true,\n        attuned: (ddbItem as any).isAttuned || false\n      },\n      flags: {\n        'beyond-foundry': {\n          ddbId: definition.id,\n          ddbType: definition.type,\n          isHomebrew: (definition as any).isHomebrew || false\n        }\n      }\n    };\n  }\n\n  /**\n   * Parse spell items\n   */\n  private static parseSpellItems(ddbCharacter: DDBCharacter): any[] {\n    const spellItems: any[] = [];\n    \n    if (ddbCharacter.spells) {\n      Object.values(ddbCharacter.spells).forEach(spellArray => {\n        if (Array.isArray(spellArray)) {\n          spellArray.forEach(spell => {\n            try {\n              const spellItem = this.parseSpellItem(spell);\n              if (spellItem) {\n                spellItems.push(spellItem);\n              }\n            } catch (error) {\n              Logger.error(`Spell parsing error: ${(error as Error).message}`);\n            }\n          });\n        }\n      });\n    }\n\n    Logger.debug(`🔮 Parsed ${spellItems.length} spell items`);\n    return spellItems;\n  }\n\n  /**\n   * Parse individual spell item\n   */\n  private static parseSpellItem(ddbSpell: DDBSpell): any | null {\n    if (!ddbSpell.definition) return null;\n\n    const definition = ddbSpell.definition;\n    \n    return {\n      name: definition.name,\n      type: 'spell',\n      img: 'icons/magic/symbols/rune-sigil-black-pink.webp',\n      system: {\n        description: { value: definition.description || '' },\n        level: definition.level || 0,\n        school: definition.school?.toLowerCase() || 'evocation',\n        components: {\n          vocal: definition.components?.verbal || false,\n          somatic: definition.components?.somatic || false,\n          material: definition.components?.material || false,\n          ritual: definition.ritual || false,\n          concentration: definition.concentration || false\n        },\n        materials: { value: definition.components?.materialComponent || '' },\n        preparation: { mode: 'prepared', prepared: ddbSpell.prepared || false },\n        scaling: { mode: 'none', formula: '' },\n        range: { value: null, units: 'ft' },\n        target: { value: null, width: null, units: '', type: '' },\n        duration: { value: null, units: '' },\n        activation: { type: 'action', cost: 1, condition: '' }\n      },\n      flags: {\n        'beyond-foundry': {\n          ddbId: definition.id,\n          spellListId: (ddbSpell as any).spellListId\n        }\n      }\n    };\n  }\n\n  /**\n   * Parse features (simplified for now)\n   */\n  private static parseFeatures(ddbCharacter: DDBCharacter): any[] {\n    const features: any[] = [];\n    \n    try {\n      // Parse class features\n      if (ddbCharacter.classes && Array.isArray(ddbCharacter.classes)) {\n        for (const ddbClass of ddbCharacter.classes) {\n          if (ddbClass.classFeatures && Array.isArray(ddbClass.classFeatures)) {\n            for (const feature of ddbClass.classFeatures) {\n              features.push({\n                name: feature.name || 'Unknown Feature',\n                type: 'feat',\n                img: 'systems/dnd5e/icons/skills/light_01.jpg',\n                system: {\n                  description: {\n                    value: feature.description || '',\n                    chat: '',\n                    unidentified: ''\n                  },\n                  source: `${ddbClass.definition?.name || 'Class'} Level ${feature.requiredLevel || 1}`,\n                  activation: { type: '', cost: 0, condition: '' },\n                  duration: { value: null, units: '' },\n                  target: { value: null, width: null, units: '', type: '' },\n                  range: { value: null, long: null, units: '' },\n                  uses: { value: null, max: '', per: null, recovery: '' },\n                  consume: { type: '', target: null, amount: null },\n                  ability: null,\n                  actionType: '',\n                  attackBonus: '',\n                  chatFlavor: '',\n                  critical: { threshold: null, damage: '' },\n                  damage: { parts: [], versatile: '' },\n                  formula: '',\n                  save: { ability: '', dc: null, scaling: 'spell' },\n                  requirements: feature.prerequisite || '',\n                  recharge: { value: null, charged: false }\n                },\n                effects: [],\n                folder: null,\n                sort: 0,\n                ownership: { default: 0 },\n                flags: {\n                  'beyond-foundry': {\n                    type: 'classFeature',\n                    class: ddbClass.definition?.name || 'Unknown',\n                    level: feature.requiredLevel || 1,\n                    id: feature.id\n                  }\n                }\n              });\n            }\n          }\n\n          // Parse subclass features\n          if (ddbClass.subclassDefinition?.classFeatures && Array.isArray(ddbClass.subclassDefinition.classFeatures)) {\n            for (const feature of ddbClass.subclassDefinition.classFeatures) {\n              features.push({\n                name: feature.name || 'Unknown Subclass Feature',\n                type: 'feat',\n                img: 'systems/dnd5e/icons/skills/light_02.jpg',\n                system: {\n                  description: {\n                    value: feature.description || '',\n                    chat: '',\n                    unidentified: ''\n                  },\n                  source: `${ddbClass.subclassDefinition?.name || 'Subclass'} Level ${feature.requiredLevel || 1}`,\n                  activation: { type: '', cost: 0, condition: '' },\n                  duration: { value: null, units: '' },\n                  target: { value: null, width: null, units: '', type: '' },\n                  range: { value: null, long: null, units: '' },\n                  uses: { value: null, max: '', per: null, recovery: '' },\n                  consume: { type: '', target: null, amount: null },\n                  ability: null,\n                  actionType: '',\n                  attackBonus: '',\n                  chatFlavor: '',\n                  critical: { threshold: null, damage: '' },\n                  damage: { parts: [], versatile: '' },\n                  formula: '',\n                  save: { ability: '', dc: null, scaling: 'spell' },\n                  requirements: feature.prerequisite || '',\n                  recharge: { value: null, charged: false }\n                },\n                effects: [],\n                folder: null,\n                sort: 0,\n                ownership: { default: 0 },\n                flags: {\n                  'beyond-foundry': {\n                    type: 'subclassFeature',\n                    subclass: ddbClass.subclassDefinition?.name || 'Unknown',\n                    level: feature.requiredLevel || 1,\n                    id: feature.id\n                  }\n                }\n              });\n            }\n          }\n        }\n      }\n\n      // Parse racial traits\n      if (ddbCharacter.race?.racialTraits && Array.isArray(ddbCharacter.race.racialTraits)) {\n        for (const trait of ddbCharacter.race.racialTraits) {\n          const definition = trait.definition;\n          if (definition) {\n            features.push({\n              name: definition.name || 'Unknown Racial Trait',\n              type: 'feat',\n              img: 'systems/dnd5e/icons/skills/yellow_03.jpg',\n              system: {\n                description: {\n                  value: definition.description || '',\n                  chat: definition.snippet || '',\n                  unidentified: ''\n                },\n                source: ddbCharacter.race?.fullName || 'Racial Trait',\n                activation: definition.activation ? {\n                  type: definition.activation.activationType || '',\n                  cost: definition.activation.activationTime || 0,\n                  condition: ''\n                } : { type: '', cost: 0, condition: '' },\n                duration: { value: null, units: '' },\n                target: { value: null, width: null, units: '', type: '' },\n                range: { value: null, long: null, units: '' },\n                uses: { value: null, max: '', per: null, recovery: '' },\n                consume: { type: '', target: null, amount: null },\n                ability: null,\n                actionType: '',\n                attackBonus: '',\n                chatFlavor: '',\n                critical: { threshold: null, damage: '' },\n                damage: { parts: [], versatile: '' },\n                formula: '',\n                save: { ability: '', dc: null, scaling: 'spell' },\n                requirements: '',\n                recharge: { value: null, charged: false }\n              },\n              effects: [],\n              folder: null,\n              sort: 0,\n              ownership: { default: 0 },\n              flags: {\n                'beyond-foundry': {\n                  type: 'racialTrait',\n                  race: ddbCharacter.race?.fullName || 'Unknown',\n                  id: definition.id\n                }\n              }\n            });\n          }\n        }\n      }\n\n      // Parse background feature\n      if (ddbCharacter.background?.definition?.featureName) {\n        features.push({\n          name: ddbCharacter.background.definition.featureName,\n          type: 'feat',\n          img: 'systems/dnd5e/icons/skills/green_01.jpg',\n          system: {\n            description: {\n              value: ddbCharacter.background.definition.featureDescription || '',\n              chat: '',\n              unidentified: ''\n            },\n            source: ddbCharacter.background.definition.name || 'Background',\n            activation: { type: '', cost: 0, condition: '' },\n            duration: { value: null, units: '' },\n            target: { value: null, width: null, units: '', type: '' },\n            range: { value: null, long: null, units: '' },\n            uses: { value: null, max: '', per: null, recovery: '' },\n            consume: { type: '', target: null, amount: null },\n            ability: null,\n            actionType: '',\n            attackBonus: '',\n            chatFlavor: '',\n            critical: { threshold: null, damage: '' },\n            damage: { parts: [], versatile: '' },\n            formula: '',\n            save: { ability: '', dc: null, scaling: 'spell' },\n            requirements: '',\n            recharge: { value: null, charged: false }\n          },\n          effects: [],\n          folder: null,\n          sort: 0,\n          ownership: { default: 0 },\n          flags: {\n            'beyond-foundry': {\n              type: 'backgroundFeature',\n              background: ddbCharacter.background.definition.name || 'Unknown',\n              id: ddbCharacter.background.definition.id\n            }\n          }\n        });\n      }\n\n      // Parse feats (from various sources)\n      if (ddbCharacter.feats && Array.isArray(ddbCharacter.feats)) {\n        for (const feat of ddbCharacter.feats) {\n          if (feat.definition) {\n            features.push({\n              name: feat.definition.name || 'Unknown Feat',\n              type: 'feat',\n              img: 'systems/dnd5e/icons/skills/red_01.jpg',\n              system: {\n                description: {\n                  value: feat.definition.description || '',\n                  chat: feat.definition.snippet || '',\n                  unidentified: ''\n                },\n                source: 'Feat',\n                activation: { type: '', cost: 0, condition: '' },\n                duration: { value: null, units: '' },\n                target: { value: null, width: null, units: '', type: '' },\n                range: { value: null, long: null, units: '' },\n                uses: { value: null, max: '', per: null, recovery: '' },\n                consume: { type: '', target: null, amount: null },\n                ability: null,\n                actionType: '',\n                attackBonus: '',\n                chatFlavor: '',\n                critical: { threshold: null, damage: '' },\n                damage: { parts: [], versatile: '' },\n                formula: '',\n                save: { ability: '', dc: null, scaling: 'spell' },\n                requirements: feat.definition.prerequisite || '',\n                recharge: { value: null, charged: false }\n              },\n              effects: [],\n              folder: null,\n              sort: 0,\n              ownership: { default: 0 },\n              flags: {\n                'beyond-foundry': {\n                  type: 'feat',\n                  id: feat.definition.id\n                }\n              }\n            });\n          }\n        }\n      }\n\n      // Parse optional class features if enabled\n      if (ddbCharacter.optionalClassFeatures && Array.isArray(ddbCharacter.optionalClassFeatures)) {\n        for (const feature of ddbCharacter.optionalClassFeatures) {\n          if (feature.definition) {\n            features.push({\n              name: feature.definition.name || 'Unknown Optional Feature',\n              type: 'feat',\n              img: 'systems/dnd5e/icons/skills/blue_01.jpg',\n              system: {\n                description: {\n                  value: feature.definition.description || '',\n                  chat: feature.definition.snippet || '',\n                  unidentified: ''\n                },\n                source: 'Optional Class Feature',\n                activation: { type: '', cost: 0, condition: '' },\n                duration: { value: null, units: '' },\n                target: { value: null, width: null, units: '', type: '' },\n                range: { value: null, long: null, units: '' },\n                uses: { value: null, max: '', per: null, recovery: '' },\n                consume: { type: '', target: null, amount: null },\n                ability: null,\n                actionType: '',\n                attackBonus: '',\n                chatFlavor: '',\n                critical: { threshold: null, damage: '' },\n                damage: { parts: [], versatile: '' },\n                formula: '',\n                save: { ability: '', dc: null, scaling: 'spell' },\n                requirements: feature.definition.prerequisite || '',\n                recharge: { value: null, charged: false }\n              },\n              effects: [],\n              folder: null,\n              sort: 0,\n              ownership: { default: 0 },\n              flags: {\n                'beyond-foundry': {\n                  type: 'optionalClassFeature',\n                  id: feature.definition.id\n                }\n              }\n            });\n          }\n        }\n      }\n\n    } catch (error) {\n      Logger.error(`Error parsing features: ${error}`);\n    }\n\n    Logger.debug(`🎪 Parsed ${features.length} features`);\n    return features;\n  }\n}\n","import type { \n  DDBCharacter, \n  CharacterListResponse, \n  ImportResult, \n  AuthResponse,\n  ImportOptions \n} from '../../types/index.js';\nimport { getModuleSettings } from '../utils/settings.js';\nimport { Logger, getErrorMessage } from '../utils/logger.js';\nimport { DEFAULT_IMPORT_OPTIONS } from '../constants.js';\nimport { CharacterParser } from '../../parsers/character/CharacterParser.js';\n\n/**\n * Main API class for Beyond Foundry module\n * Handles communication with ddb-proxy and data transformation\n */\nexport class BeyondFoundryAPI {\n  private static instance: BeyondFoundryAPI;\n  private proxyEndpoint: string = '';\n  private apiEndpoint: string = '';\n  private initialized: boolean = false;\n\n  private constructor() {}\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): BeyondFoundryAPI {\n    if (!BeyondFoundryAPI.instance) {\n      BeyondFoundryAPI.instance = new BeyondFoundryAPI();\n    }\n    return BeyondFoundryAPI.instance;\n  }\n\n  /**\n   * Initialize the API with current settings\n   */\n  public init(): void {\n    if (this.initialized) return;\n\n    const settings = getModuleSettings();\n    this.proxyEndpoint = settings.proxyUrl;\n    this.apiEndpoint = settings.apiEndpoint;\n    this.initialized = true;\n    \n    Logger.info('BeyondFoundryAPI initialized');\n    \n    // Test proxy connection on init\n    this.testProxyConnection().catch(error => {\n      Logger.warn(`Initial proxy connection test failed: ${error.message}`);\n    });\n  }\n\n  /**\n   * Test connection to ddb-proxy\n   */\n  public async testProxyConnection(): Promise<boolean> {\n    try {\n      Logger.debug(`Testing proxy connection to: ${this.proxyEndpoint}`);\n      \n      const response = await fetch(`${this.proxyEndpoint}/ping`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        Logger.info('Proxy connection successful');\n        return true;\n      } else {\n        Logger.warn(`Proxy connection failed with status: ${response.status}`);\n        return false;\n      }\n    } catch (error) {\n      Logger.error(`Proxy connection error: ${getErrorMessage(error)}`);\n      return false;\n    }\n  }\n\n  /**\n   * Authenticate with D&D Beyond through proxy\n   * @param cobaltToken - The D&D Beyond Cobalt session token (optional, uses stored token if not provided)\n   */\n  public async authenticate(cobaltToken?: string): Promise<AuthResponse> {\n    try {\n      // Use provided token or get from settings\n      const token = cobaltToken || getModuleSettings().cobaltToken;\n      \n      if (!token) {\n        return {\n          success: false,\n          message: 'No cobalt token provided. Please authenticate first.'\n        };\n      }\n\n      Logger.debug('Attempting authentication with D&D Beyond');\n      \n      const response = await fetch(`${this.proxyEndpoint}/proxy/auth`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cobalt: token\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        Logger.info('Authentication successful');\n        return {\n          success: true,\n          userId: data.userId,\n          message: 'Authentication successful'\n        };\n      } else {\n        Logger.warn(`Authentication failed: ${data.message || 'Unknown error'}`);\n        return {\n          success: false,\n          message: data.message || 'Authentication failed'\n        };\n      }\n    } catch (error) {\n      Logger.error(`Authentication error: ${getErrorMessage(error)}`);\n      return {\n        success: false,\n        message: `Authentication error: ${getErrorMessage(error)}`\n      };\n    }\n  }\n\n  /**\n   * Get list of characters from D&D Beyond\n   * NOTE: ddb-proxy does not provide a character list endpoint.\n   * Users must provide character IDs manually from D&D Beyond URLs.\n   */\n  public async getCharacterList(): Promise<CharacterListResponse> {\n    Logger.warn('Character list not available through ddb-proxy');\n    Logger.info('To get characters:');\n    Logger.info('1. Go to dndbeyond.com/characters');\n    Logger.info('2. Find character IDs in URLs: dndbeyond.com/characters/{ID}');\n    Logger.info('3. Use importCharacter(characterId) or getCharacter(characterId)');\n    \n    return {\n      success: false,\n      error: 'Character list endpoint not available in ddb-proxy. Use direct character IDs from D&D Beyond URLs (dndbeyond.com/characters/{ID}).'\n    };\n  }\n\n  /**\n   * Get character data from D&D Beyond\n   * @param characterId - The D&D Beyond character ID\n   */\n  public async getCharacter(characterId: string): Promise<DDBCharacter | null> {\n    try {\n      Logger.debug(`Fetching character data for ID: ${characterId}`);\n      \n      const cobaltToken = getModuleSettings().cobaltToken;\n      if (!cobaltToken) {\n        Logger.error('No authentication token available. Please authenticate first.');\n        return null;\n      }\n      \n      const response = await fetch(`${this.proxyEndpoint}/proxy/character`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cobalt: cobaltToken,\n          characterId: parseInt(characterId)\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        // Character data is nested under ddb.character\n        const character = data.ddb?.character;\n        if (character) {\n          Logger.info(`Retrieved character data for: ${character.name || 'Unknown'}`);\n          return character;\n        } else {\n          Logger.warn('Character data not found in response');\n          return null;\n        }\n      } else {\n        Logger.warn(`Failed to retrieve character: ${data.message || 'Unknown error'}`);\n        return null;\n      }\n    } catch (error) {\n      Logger.error(`Character fetch error: ${getErrorMessage(error)}`);\n      return null;\n    }\n  }\n\n  /**\n   * Import a character from D&D Beyond to FoundryVTT\n   * @param characterId - The D&D Beyond character ID\n   * @param options - Import options\n   */\n  public async importCharacter(\n    characterId: string, \n    options: Partial<ImportOptions> = {}\n  ): Promise<ImportResult> {\n    try {\n      Logger.info(`Starting character import for ID: ${characterId}`);\n      \n      // Get character data from D&D Beyond\n      const ddbCharacter = await this.getCharacter(characterId);\n      if (!ddbCharacter) {\n        return {\n          success: false,\n          errors: ['Failed to fetch character data from D&D Beyond']\n        };\n      }\n\n      // Merge options with defaults\n      const importOptions = { ...DEFAULT_IMPORT_OPTIONS, ...options };\n      \n      // Parse character data to FoundryVTT format\n      const actorData = CharacterParser.parseCharacter(ddbCharacter);\n      \n      // Check if character already exists\n      const existingActor = game.actors?.find(actor => \n        actor.getFlag('beyond-foundry', 'ddbCharacterId') === ddbCharacter.id\n      );\n\n      let actor: Actor;\n      \n      if (existingActor) {\n        if (importOptions.updateExisting) {\n          Logger.info(`Updating existing character: ${existingActor.name}`);\n          await existingActor.update(actorData);\n          actor = existingActor;\n        } else {\n          return {\n            success: false,\n            errors: [`Character \"${ddbCharacter.name}\" already exists. Use update option to overwrite.`],\n            warnings: ['Character import skipped due to existing character']\n          };\n        }\n      } else {\n        Logger.info(`Creating new character: ${ddbCharacter.name}`);\n        actor = await Actor.create(actorData) as Actor;\n      }\n\n      if (!actor) {\n        return {\n          success: false,\n          errors: ['Failed to create character in FoundryVTT']\n        };\n      }\n\n      Logger.info(`Successfully imported character: ${actor.name}`);\n      \n      return {\n        success: true,\n        actor: actor,\n        warnings: []\n      };\n\n    } catch (error) {\n      Logger.error(`Character import error: ${getErrorMessage(error)}`);\n      return {\n        success: false,\n        errors: [`Character import error: ${getErrorMessage(error)}`]\n      };\n    }\n  }\n\n  /**\n   * Test method for development\n   * Quick test of API connectivity with existing ddb-proxy\n   */\n  public async runConnectionTest(): Promise<void> {\n    Logger.info('Running Beyond Foundry connection test...');\n    \n    // Test 1: Proxy connection\n    const proxyTest = await this.testProxyConnection();\n    ui.notifications.info(`Proxy connection: ${proxyTest ? 'SUCCESS' : 'FAILED'}`);\n    \n    // Test 2: Authentication (if token available)\n    try {\n      const cobaltToken = getModuleSettings().cobaltToken;\n      if (cobaltToken) {\n        const authResult = await this.authenticate(cobaltToken);\n        ui.notifications.info(`Authentication: ${authResult.success ? 'SUCCESS' : 'FAILED'}`);\n        if (!authResult.success) {\n          Logger.warn(`Authentication failed: ${authResult.message}`);\n        }\n      } else {\n        ui.notifications.warn('Authentication: SKIPPED (No cobalt token configured)');\n        Logger.info('To test authentication, configure your cobalt token in module settings');\n      }\n    } catch (error) {\n      ui.notifications.error(`Authentication test failed: ${error.message}`);\n    }\n    \n    // Explain character testing\n    Logger.info('\\n💡 Character Testing:');\n    Logger.info('Character list is not available through ddb-proxy.');\n    Logger.info('To test character import:');\n    Logger.info('1. Get character ID from D&D Beyond URL: dndbeyond.com/characters/{ID}');\n    Logger.info('2. Use: game.modules.get(\"beyond-foundry\").api.quickTest(\"cobalt-token\", \"character-id\")');\n    \n    Logger.info('Connection test complete');\n  }\n\n  /**\n   * Quick authentication and character test\n   * @param cobaltToken - Your D&D Beyond CobaltSession cookie value\n   * @param characterId - Optional specific character ID to test with\n   */\n  public async quickTest(cobaltToken: string, characterId?: string): Promise<void> {\n    Logger.info('Running quick authentication test...');\n    \n    try {\n      // Test authentication\n      const authResult = await this.authenticate(cobaltToken);\n      if (!authResult.success) {\n        ui.notifications.error(`Authentication failed: ${authResult.message}`);\n        return;\n      }\n      \n      ui.notifications.info('✅ Authentication successful!');\n      Logger.info(`✅ Authenticated as user ID: ${authResult.userId}`);\n      \n      // Test character retrieval if ID provided\n      if (characterId) {\n        Logger.info(`Testing character retrieval for ID: ${characterId}...`);\n        const character = await this.getCharacter(characterId);\n        \n        if (character) {\n          ui.notifications.info(`✅ Character found: ${character.name}`);\n          Logger.info(`✅ Character Details:`);\n          Logger.info(`  - Name: ${character.name}`);\n          Logger.info(`  - Race: ${character.race?.fullName || 'Unknown'}`);\n          Logger.info(`  - Classes: ${character.classes?.map(c => `${c.definition?.name} ${c.level}`).join(', ') || 'Unknown'}`);\n          Logger.info(`  - Background: ${character.background?.definition?.name || 'Unknown'}`);\n          Logger.info(`  - HP: ${character.baseHitPoints || 'Unknown'}`);\n          \n          Logger.info(`\\n💡 To import this character, run:`);\n          Logger.info(`game.modules.get(\"beyond-foundry\").api.importCharacter(\"${characterId}\")`);\n        } else {\n          ui.notifications.warn(`❌ Failed to retrieve character with ID: ${characterId}`);\n          Logger.warn('Make sure the character ID is correct and accessible with your account');\n        }\n      } else {\n        // Explain how to get character IDs\n        Logger.info('\\n📋 To test character import:');\n        Logger.info('1. Go to dndbeyond.com/characters');\n        Logger.info('2. Click on a character');\n        Logger.info('3. Copy the ID from the URL: dndbeyond.com/characters/{ID}');\n        Logger.info('4. Run: game.modules.get(\"beyond-foundry\").api.quickTest(\"your-cobalt-token\", \"character-id\")');\n      }\n    } catch (error) {\n      ui.notifications.error(`Quick test failed: ${error.message}`);\n      Logger.error(`Quick test error: ${getErrorMessage(error)}`);\n    }\n  }\n}\n","import { MODULE_ID } from '../constants.js';\nimport { Logger } from '../utils/logger.js';\nimport { BeyondFoundryAPI } from '../api/BeyondFoundryAPI.js';\n\n/**\n * Authentication dialog for D&D Beyond integration\n * Handles Cobalt token input and validation\n */\nexport class AuthDialog extends Application {\n  static get defaultOptions(): ApplicationOptions {\n    return mergeObject(super.defaultOptions, {\n      id: `${MODULE_ID}-auth-dialog`,\n      title: 'D&D Beyond Authentication',\n      template: 'modules/beyond-foundry/templates/auth-dialog.hbs',\n      width: 500,\n      height: 'auto',\n      classes: ['beyond-foundry', 'auth-dialog'],\n      resizable: false,\n      minimizable: false,\n      closeOnSubmit: false,\n      submitOnChange: false,\n      submitOnClose: false,\n    });\n  }\n\n  /**\n   * Activate event listeners\n   */\n  activateListeners(html: JQuery): void {\n    super.activateListeners(html);\n\n    // Handle form submission\n    html.find('form').on('submit', this._onSubmitAuth.bind(this));\n    \n    // Handle test connection button\n    html.find('.test-connection').on('click', this._onTestConnection.bind(this));\n    \n    // Handle help button\n    html.find('.help-button').on('click', this._onShowHelp.bind(this));\n  }\n\n  /**\n   * Handle authentication form submission\n   */\n  private async _onSubmitAuth(event: Event): Promise<void> {\n    event.preventDefault();\n    \n    const form = event.target as HTMLFormElement;\n    const formData = new FormData(form);\n    const cobaltToken = formData.get('cobaltToken') as string;\n    \n    if (!cobaltToken || cobaltToken.trim() === '') {\n      ui.notifications.error('Please enter your Cobalt session token');\n      return;\n    }\n\n    try {\n      Logger.info('Attempting D&D Beyond authentication...');\n      \n      // Show loading state\n      const submitButton = form.querySelector('button[type=\"submit\"]') as HTMLButtonElement;\n      const originalText = submitButton.textContent;\n      submitButton.textContent = 'Authenticating...';\n      submitButton.disabled = true;\n\n      const api = BeyondFoundryAPI.getInstance();\n      const result = await api.authenticate(cobaltToken.trim());\n\n      if (result.success) {\n        ui.notifications.info('Authentication successful!');\n        \n        // Store token in settings for future use\n        await game.settings.set(MODULE_ID, 'cobaltToken', cobaltToken.trim());\n        \n        this.close();\n      } else {\n        ui.notifications.error(`Authentication failed: ${result.message}`);\n      }\n      \n      // Restore button state\n      submitButton.textContent = originalText;\n      submitButton.disabled = false;\n      \n    } catch (error) {\n      Logger.error(`Authentication error: ${error.message}`);\n      ui.notifications.error(`Authentication error: ${error.message}`);\n    }\n  }\n\n  /**\n   * Test proxy connection\n   */\n  private async _onTestConnection(event: Event): Promise<void> {\n    event.preventDefault();\n    \n    try {\n      const api = BeyondFoundryAPI.getInstance();\n      const connected = await api.testProxyConnection();\n      \n      if (connected) {\n        ui.notifications.info('Proxy connection successful!');\n      } else {\n        ui.notifications.error('Proxy connection failed. Check your ddb-proxy setup.');\n      }\n    } catch (error) {\n      Logger.error(`Connection test error: ${error.message}`);\n      ui.notifications.error(`Connection test failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Show help information\n   */\n  private _onShowHelp(event: Event): void {\n    event.preventDefault();\n    \n    new Dialog({\n      title: 'Getting Your Cobalt Token',\n      content: `\n        <div class=\"beyond-foundry-help\">\n          <h3>How to find your Cobalt session token:</h3>\n          <ol>\n            <li>Log in to <a href=\"https://www.dndbeyond.com\" target=\"_blank\">D&D Beyond</a></li>\n            <li>Open your browser's Developer Tools (F12)</li>\n            <li>Go to the <strong>Application</strong> or <strong>Storage</strong> tab</li>\n            <li>Look for <strong>Cookies</strong> under the D&D Beyond domain</li>\n            <li>Find the cookie named <strong>CobaltSession</strong></li>\n            <li>Copy its value (should be a long string)</li>\n          </ol>\n          <p><strong>Important:</strong> Keep this token private! It provides access to your D&D Beyond account.</p>\n          <p><em>The token will expire periodically and you'll need to get a new one.</em></p>\n        </div>\n      `,\n      buttons: {\n        ok: {\n          label: 'Got it!',\n          callback: () => {}\n        }\n      }\n    }).render(true);\n  }\n\n  /**\n   * Get template data\n   */\n  getData(): any {\n    return {\n      isConnected: false, // TODO: Check if already authenticated\n      proxyUrl: game.settings.get(MODULE_ID, 'proxyUrl')\n    };\n  }\n\n  /**\n   * Static method to show authentication dialog\n   */\n  static show(): AuthDialog {\n    const dialog = new AuthDialog();\n    dialog.render(true);\n    return dialog;\n  }\n}\n","import { MODULE_ID } from '../constants.js';\nimport { Logger } from '../utils/logger.js';\nimport { BeyondFoundryAPI } from '../api/BeyondFoundryAPI.js';\nimport { AuthDialog } from './AuthDialog.js';\nimport type { DDBCharacter, ImportOptions } from '../../types/index.js';\n\ninterface PendingCharacter {\n  id: string;\n  loading: boolean;\n  loaded: boolean;\n  error?: string;\n  character?: DDBCharacter;\n}\n\n/**\n * Character import dialog for manual character ID input and importing\n */\nexport class CharacterImportDialog extends Application {\n  private pendingCharacters: Map<string, PendingCharacter> = new Map();\n  private loading: boolean = false;\n\n  static get defaultOptions(): ApplicationOptions {\n    return mergeObject(super.defaultOptions, {\n      id: `${MODULE_ID}-character-import-dialog`,\n      title: 'Import D&D Beyond Characters',\n      template: 'modules/beyond-foundry/templates/character-import-dialog-v2.hbs',\n      width: 700,\n      height: 600,\n      classes: ['beyond-foundry', 'character-import-dialog'],\n      resizable: true,\n      minimizable: false,\n      closeOnSubmit: false,\n      submitOnChange: false,\n      submitOnClose: false,\n    });\n  }\n\n  /**\n   * Activate event listeners\n   */\n  activateListeners(html: JQuery): void {\n    super.activateListeners(html);\n\n    // Authentication button\n    html.find('.authenticate').on('click', this._onAuthenticate.bind(this));\n    \n    // Add single character button\n    html.find('.add-character-btn').on('click', this._onAddCharacter.bind(this));\n    \n    // Add bulk characters button\n    html.find('.add-bulk-characters-btn').on('click', this._onAddBulkCharacters.bind(this));\n    \n    // Remove character buttons (using event delegation for dynamic elements)\n    html.on('click', '.remove-character-btn', this._onRemoveCharacter.bind(this));\n    \n    // Preview all characters button\n    html.find('.preview-all-btn').on('click', this._onPreviewAllCharacters.bind(this));\n    \n    // Clear all characters button\n    html.find('.clear-all-btn').on('click', this._onClearAllCharacters.bind(this));\n    \n    // Import characters button\n    html.find('.import-characters').on('click', this._onImportCharacters.bind(this));\n\n    // Enter key handling for character ID input\n    html.find('#character-id-input').on('keypress', (event) => {\n      if (event.which === 13) { // Enter key\n        event.preventDefault();\n        // Create a fake event for compatibility\n        const fakeEvent = { preventDefault: () => {} } as Event;\n        this._onAddCharacter(fakeEvent);\n      }\n    });\n  }\n\n  /**\n   * Add a single character by ID\n   */\n  private async _onAddCharacter(event: Event): Promise<void> {\n    event.preventDefault();\n    \n    const input = this.element.find('#character-id-input')[0] as HTMLInputElement;\n    const characterId = input.value.trim();\n    \n    if (!characterId) {\n      ui.notifications.warn('Please enter a character ID');\n      return;\n    }\n    \n    if (!/^\\d+$/.test(characterId)) {\n      ui.notifications.error('Character ID must be a number');\n      return;\n    }\n    \n    if (this.pendingCharacters.has(characterId)) {\n      ui.notifications.warn('Character already added');\n      return;\n    }\n    \n    // Add character to pending list\n    this.pendingCharacters.set(characterId, {\n      id: characterId,\n      loading: false,\n      loaded: false\n    });\n    \n    // Clear input\n    input.value = '';\n    \n    // Re-render to show the new character\n    this.render();\n  }\n\n  /**\n   * Add multiple characters from bulk input\n   */\n  private async _onAddBulkCharacters(event: Event): Promise<void> {\n    event.preventDefault();\n    \n    const textarea = this.element.find('#bulk-character-ids')[0] as HTMLTextAreaElement;\n    const text = textarea.value.trim();\n    \n    if (!text) {\n      ui.notifications.warn('Please enter character IDs');\n      return;\n    }\n    \n    const lines = text.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n    let added = 0;\n    let skipped = 0;\n    \n    for (const line of lines) {\n      if (!/^\\d+$/.test(line)) {\n        ui.notifications.warn(`Skipping invalid character ID: ${line}`);\n        skipped++;\n        continue;\n      }\n      \n      if (this.pendingCharacters.has(line)) {\n        skipped++;\n        continue;\n      }\n      \n      this.pendingCharacters.set(line, {\n        id: line,\n        loading: false,\n        loaded: false\n      });\n      added++;\n    }\n    \n    // Clear textarea\n    textarea.value = '';\n    \n    if (added > 0) {\n      ui.notifications.info(`Added ${added} character(s)`);\n    }\n    \n    if (skipped > 0) {\n      ui.notifications.warn(`Skipped ${skipped} character(s) (invalid or already added)`);\n    }\n    \n    // Re-render to show the new characters\n    this.render();\n  }\n\n  /**\n   * Remove a character from the pending list\n   */\n  private _onRemoveCharacter(event: Event): void {\n    event.preventDefault();\n    \n    const button = event.target as HTMLElement;\n    const characterId = button.dataset.characterId || button.closest('[data-character-id]')?.getAttribute('data-character-id');\n    \n    if (characterId && this.pendingCharacters.has(characterId)) {\n      this.pendingCharacters.delete(characterId);\n      this.render();\n    }\n  }\n\n  /**\n   * Preview all characters (load their data)\n   */\n  private async _onPreviewAllCharacters(event: Event): Promise<void> {\n    event.preventDefault();\n    \n    if (this.loading) return;\n    \n    const unloadedCharacters = Array.from(this.pendingCharacters.values())\n      .filter(char => !char.loading && !char.loaded && !char.error);\n    \n    if (unloadedCharacters.length === 0) {\n      ui.notifications.info('All characters are already loaded');\n      return;\n    }\n    \n    this.loading = true;\n    \n    // Mark all as loading\n    for (const char of unloadedCharacters) {\n      char.loading = true;\n    }\n    \n    this.render();\n    \n    const api = BeyondFoundryAPI.getInstance();\n    \n    // Load characters in parallel\n    const promises = unloadedCharacters.map(async (char) => {\n      try {\n        const result = await api.getCharacter(char.id);\n        \n        if (result.success && result.character) {\n          char.character = result.character;\n          char.loaded = true;\n          char.error = undefined;\n        } else {\n          char.error = result.error || 'Failed to load character';\n          char.loaded = false;\n        }\n      } catch (error) {\n        char.error = error.message || 'Unknown error';\n        char.loaded = false;\n      } finally {\n        char.loading = false;\n      }\n    });\n    \n    await Promise.all(promises);\n    \n    this.loading = false;\n    this.render();\n    \n    const successful = unloadedCharacters.filter(char => char.loaded).length;\n    const failed = unloadedCharacters.length - successful;\n    \n    if (successful > 0) {\n      ui.notifications.info(`Successfully loaded ${successful} character(s)`);\n    }\n    \n    if (failed > 0) {\n      ui.notifications.warn(`Failed to load ${failed} character(s)`);\n    }\n  }\n\n  /**\n   * Clear all characters from the pending list\n   */\n  private _onClearAllCharacters(event: Event): void {\n    event.preventDefault();\n    \n    this.pendingCharacters.clear();\n    this.render();\n  }\n\n  /**\n   * Open authentication dialog\n   */\n  private async _onAuthenticate(event: Event): Promise<void> {\n    event.preventDefault();\n    \n    const authDialog = AuthDialog.show();\n    \n    // Listen for successful authentication\n    authDialog.element.on('close', () => {\n      // Refresh the dialog to show updated auth status\n      this.render();\n    });\n  }\n\n  /**\n   * Import all loaded characters\n   */\n  private async _onImportCharacters(event: Event): Promise<void> {\n    event.preventDefault();\n    \n    const readyCharacters = Array.from(this.pendingCharacters.values())\n      .filter(char => char.loaded && char.character);\n    \n    if (readyCharacters.length === 0) {\n      ui.notifications.warn('No characters are ready to import. Please preview characters first.');\n      return;\n    }\n\n    const button = event.target as HTMLButtonElement;\n    const originalText = button.textContent;\n    button.textContent = 'Importing...';\n    button.disabled = true;\n\n    try {\n      const api = BeyondFoundryAPI.getInstance();\n      const results = [];\n\n      for (const pendingChar of readyCharacters) {\n        Logger.info(`Importing character: ${pendingChar.character!.name} (ID: ${pendingChar.id})`);\n        \n        const result = await api.importCharacter(pendingChar.id);\n        results.push({\n          characterId: pendingChar.id,\n          characterName: pendingChar.character!.name,\n          result\n        });\n      }\n\n      // Show results\n      const successful = results.filter(r => r.result.success).length;\n      const failed = results.length - successful;\n\n      if (successful > 0) {\n        ui.notifications.info(`Successfully imported ${successful} character(s)`);\n      }\n      \n      if (failed > 0) {\n        ui.notifications.warn(`Failed to import ${failed} character(s)`);\n        \n        // Log failed imports\n        results.filter(r => !r.result.success).forEach(r => {\n          Logger.error(`Failed to import ${r.characterName}: ${r.result.error}`);\n        });\n      }\n\n      // Close dialog if all successful\n      if (failed === 0) {\n        this.close();\n      }\n\n    } catch (error) {\n      Logger.error(`Import error: ${error.message}`);\n      ui.notifications.error(`Import failed: ${error.message}`);\n    } finally {\n      button.textContent = originalText;\n      button.disabled = false;\n    }\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  private _isAuthenticated(): boolean {\n    const settings = game.settings.get(MODULE_ID, 'cobaltToken') as string;\n    return !!(settings && settings.trim() !== '');\n  }\n\n  /**\n   * Get template data\n   */\n  getData(): any {\n    const pendingCharactersList = Array.from(this.pendingCharacters.values());\n    const readyToImport = pendingCharactersList.filter(char => char.loaded && char.character);\n    \n    return {\n      isAuthenticated: this._isAuthenticated(),\n      pendingCharacters: pendingCharactersList,\n      readyToImport: readyToImport.length > 0,\n      readyCount: readyToImport.length,\n      loading: this.loading\n    };\n  }\n\n  /**\n   * Static method to show character import dialog\n   */\n  static show(): CharacterImportDialog {\n    const dialog = new CharacterImportDialog();\n    dialog.render(true);\n    return dialog;\n  }\n}\n","import { MODULE_ID, MODULE_NAME } from './constants.js';\nimport { registerSettings } from './utils/settings.js';\nimport { Logger } from './utils/logger.js';\nimport { BeyondFoundryAPI } from './api/BeyondFoundryAPI.js';\nimport { CharacterImportDialog } from './apps/CharacterImportDialog.js';\n\n/**\n * Beyond Foundry Module Entry Point\n * \n * This module allows importing purchased D&D Beyond content into FoundryVTT\n * with support for characters, spells, items, and more.\n */\n\n// Initialize module when Foundry is ready\nHooks.once('init', async () => {\n  Logger.info(`Initializing ${MODULE_NAME}...`);\n  \n  // Register module settings\n  registerSettings();\n  \n  // Initialize API\n  const api = BeyondFoundryAPI.getInstance();\n  \n  // Expose API globally for console access and other modules\n  (game as any).modules.get(MODULE_ID).api = api;\n  \n  Logger.info(`${MODULE_NAME} initialized successfully`);\n});\n\n// Setup module when ready\nHooks.once('ready', async () => {\n  Logger.info(`${MODULE_NAME} ready`);\n  \n  // Initialize API with current settings\n  const api = BeyondFoundryAPI.getInstance();\n  api.init();\n  \n  // Add console message for developers\n  Logger.info('Access the API via: game.modules.get(\"beyond-foundry\").api');\n});\n\n// Add character sheet header button for import\nHooks.on('getActorSheetHeaderButtons', (app: any, buttons: any[]) => {\n  // Only add to character sheets in D&D 5e system\n  if (app.actor.type !== 'character' || game.system.id !== 'dnd5e') {\n    return;\n  }\n  \n  buttons.unshift({\n    label: 'Import from D&D Beyond',\n    class: 'beyond-foundry-import',\n    icon: 'fas fa-download',\n    onclick: () => {\n      Logger.info('D&D Beyond import button clicked');\n      CharacterImportDialog.show();\n    }\n  });\n});\n\n// Add actor directory context menu option\nHooks.on('getActorDirectoryEntryContext', (html: any, options: any[]) => {\n  options.push({\n    name: 'Import from D&D Beyond',\n    icon: '<i class=\"fas fa-download\"></i>',\n    condition: () => game.system.id === 'dnd5e',\n    callback: () => {\n      Logger.info('D&D Beyond import context menu clicked');\n      CharacterImportDialog.show();\n    }\n  });\n});\n\n// Console command for testing (development)\nHooks.once('ready', () => {\n  if (game.settings.get(MODULE_ID, 'debugMode')) {\n    Logger.info('Debug mode enabled - test commands available');\n    Logger.info('Try: game.modules.get(\"beyond-foundry\").api.runConnectionTest()');\n  }\n});\n\nLogger.info(`${MODULE_NAME} module loaded`);\n"],"names":[],"mappings":"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"}